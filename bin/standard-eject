#!/usr/bin/env node

const cp = require('child_process')
const fs = require('fs')
const path = require('path')

const falafelBash = require('falafel-bash')
const formatPackageJson = require('format-package-json')

const cwd = process.cwd()
let removeCommand
let addCommand

// Detect whether to use yarn or npm
if (fs.existsSync(path.join(cwd, 'yarn.lock'))) {
  removeCommand = 'yarn remove'
  addCommand = 'yarn add --dev'
} else {
  removeCommand = 'npm uninstall --save-dev'
  addCommand = 'npm install --save-dev'
}

removeCommand += ' standard'
addCommand += ' standardx'

// Print commands so the user knows what is happening

console.log(removeCommand)
cp.execSync(removeCommand, {stdio: 'inherit'})

console.log(addCommand)
cp.execSync(addCommand, {stdio: 'inherit'})

migratePackageJson()

console.log()
console.log('All done! I tried to change `standard` to `standardx` in your package.json scripts,')
console.log("but you should make sure it's correct, and change it in any other files as well.")

function migratePackageJson () {
  const pkgPath = path.join(cwd, 'package.json')
  const pkgFormat = formatPackageJson.readSync(pkgPath)
  const pkg = require(pkgPath)
  const newPkg = transformPackageJson(pkg)

  formatPackageJson.writeSync(pkgPath, newPkg, pkgFormat)
}

function transformPackageJson (pkg) {
  const newPkg = Object.create(null)

  for (const name in pkg) {
    if (name === 'scripts') {
      newPkg.scripts = transformScripts(pkg.scripts)
    } else {
      const newName = name === 'standard' ? 'standardx' : name
      newPkg[newName] = pkg[name]
    }
  }

  return newPkg
}

function transformScripts (scripts) {
  const newScripts = Object.create(null)

  for (const script in scripts) {
    newScripts[script] = falafelBash(scripts[script], node => {
      if (node.type === 'Command' && node.name.text === 'standard') {
        node.name.update('standardx')
      }
    }).toString()
  }

  return newScripts
}
